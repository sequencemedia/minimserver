"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.execute=execute;exports.exit=exports.relaunch=exports.restart=exports.rescan=void 0;var _os=_interopRequireDefault(require("os"));var _path=_interopRequireDefault(require("path"));var _child_process=require("child_process");var _fsExtra=require("fs-extra");var _sacredFs=require("sacred-fs");var _chokidar=_interopRequireDefault(require("chokidar"));var _anymatch=_interopRequireDefault(require("anymatch"));var _rimraf=_interopRequireDefault(require("rimraf"));var _del=_interopRequireDefault(require("del"));var _debug=_interopRequireDefault(require("debug"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const error=(0,_debug.default)('minimserver:error');const log=(0,_debug.default)('minimserver:log');async function originDirExists(path){try{await(0,_sacredFs.stat)(path);return true;}catch({code,...e}){if(code!=='ENOENT'){const{message}=e;error(message);}return false;}}const removeAllM3UFromDestinationDir=path=>new Promise((resolve,reject)=>{(0,_rimraf.default)(path,e=>!e?resolve():reject(e));});const ensureDestinationDir=path=>new Promise((resolve,reject)=>{(0,_fsExtra.ensureDir)(path,e=>!e?resolve():reject(e));});const ensureDestinationM3U=filePath=>new Promise((resolve,reject)=>{(0,_fsExtra.ensureFile)(filePath,e=>!e?resolve():reject(e));});const rescan=server=>new Promise((resolve,reject)=>{(0,_child_process.exec)(`curl -X POST -H "Content-Type: text/plain" ${server} -d rescan`,(e,r)=>!e?resolve(r):reject(e));});exports.rescan=rescan;const restart=server=>new Promise((resolve,reject)=>{(0,_child_process.exec)(`curl -X POST -H "Content-Type: text/plain" ${server} -d restart`,(e,r)=>!e?resolve(r):reject(e));});exports.restart=restart;const relaunch=server=>new Promise((resolve,reject)=>{(0,_child_process.exec)(`curl -X POST -H "Content-Type: text/plain" ${server} -d relaunch`,(e,r)=>!e?resolve(r):reject(e));});exports.relaunch=relaunch;const exit=server=>new Promise((resolve,reject)=>{(0,_child_process.exec)(`curl -X POST -H "Content-Type: text/plain" ${server} -d exit`,(e,r)=>!e?resolve(r):reject(e));});exports.exit=exit;function createFactory(origin,destination){return async function(filePath){const to=filePath.replace(origin,destination);log('create',to);try{await ensureDestinationM3U(to);await(0,_sacredFs.copyFile)(filePath,to);}catch({message}){error(message);}};}function unlinkFactory(origin,destination){return async function(filePath){const to=filePath.replace(origin,destination);log('unlink',to);try{await(0,_del.default)(to,{force:true});}catch({message}){error(message);}};}function queueRescanFactory(server){let timeout;return function(){if(timeout)clearTimeout(timeout);timeout=setTimeout(async()=>{try{const response=await rescan(server);log('queue',response.trim());}catch({message}){error(message);}},9999);};}function ignorePatternFactory(ignore){const ignorePatterns=ignore.split(',');return function(filePath){return /(^|[/\\])\../.test(filePath)||(0,_anymatch.default)(ignorePatterns,filePath);};}async function execute(origin='.',destination='.',server='http://0.0.0.0:9790',ignore=''){let watcher;try{const o=_path.default.resolve(origin.replace('~',_os.default.homedir));if(!(await originDirExists(o)))throw new Error(`Origin ${origin} does not exist.`);const d=_path.default.resolve(destination.replace('~',_os.default.homedir));const ignorePattern=ignorePatternFactory(ignore);watcher=_chokidar.default.watch(o,{ignored:ignorePattern});const create=createFactory(o,d);const unlink=unlinkFactory(o,d);await ensureDestinationDir(d);await removeAllM3UFromDestinationDir(d);const queueRescan=queueRescanFactory(server);watcher.on('add',async function(filePath){try{await create(filePath);queueRescan();}catch({message}){error(message);}}).on('change',async function(filePath){try{await create(filePath);queueRescan();}catch({message}){error(message);}}).on('unlink',async function(filePath){try{await unlink(filePath);queueRescan();}catch({message}){error(message);}});queueRescan();}catch({message}){if(watcher)watcher.close();error(message);}}